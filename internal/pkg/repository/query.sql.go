// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addOrderItemCustomerOwner = `-- name: AddOrderItemCustomerOwner :exec
UPDATE "order_item" SET "customer_owners" = array_append("customer_owners", $4::UUID)
WHERE "tab_id" = $1 AND "order_id" = $2 AND "scoped_id" = $3 AND $4::UUID != ANY("customer_owners")
`

type AddOrderItemCustomerOwnerParams struct {
	TabID      uuid.UUID `json:"tab_id"`
	OrderID    int16     `json:"order_id"`
	ScopedID   int16     `json:"scoped_id"`
	CustomerID uuid.UUID `json:"customer_id"`
}

func (q *Queries) AddOrderItemCustomerOwner(ctx context.Context, arg AddOrderItemCustomerOwnerParams) error {
	_, err := q.db.Exec(ctx, addOrderItemCustomerOwner,
		arg.TabID,
		arg.OrderID,
		arg.ScopedID,
		arg.CustomerID,
	)
	return err
}

const addOrderItemGuestOwner = `-- name: AddOrderItemGuestOwner :exec
UPDATE "order_item" SET "guest_owners" = array_append("guest_owners", $4::SMALLINT)
WHERE "tab_id" = $1 AND "order_id" = $2 AND "scoped_id" = $3 AND $4::SMALLINT != ANY("guest_owners")
`

type AddOrderItemGuestOwnerParams struct {
	TabID    uuid.UUID `json:"tab_id"`
	OrderID  int16     `json:"order_id"`
	ScopedID int16     `json:"scoped_id"`
	GuestID  int16     `json:"guest_id"`
}

func (q *Queries) AddOrderItemGuestOwner(ctx context.Context, arg AddOrderItemGuestOwnerParams) error {
	_, err := q.db.Exec(ctx, addOrderItemGuestOwner,
		arg.TabID,
		arg.OrderID,
		arg.ScopedID,
		arg.GuestID,
	)
	return err
}

const closeTab = `-- name: CloseTab :one
UPDATE "tab" SET "closed_at" = NOW() WHERE "id" = $1
RETURNING "closed_at"
`

func (q *Queries) CloseTab(ctx context.Context, id uuid.UUID) (pgtype.Timestamp, error) {
	row := q.db.QueryRow(ctx, closeTab, id)
	var closed_at pgtype.Timestamp
	err := row.Scan(&closed_at)
	return closed_at, err
}

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO "customer" ("login_id", "email", "password_hash", "name", "phone_number")
VALUES ($1, $2, $3, $4, $5)
RETURNING id, login_id, email, password_hash, name, phone_number, created_at, updated_at
`

type CreateCustomerParams struct {
	LoginID      string      `json:"login_id"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	Name         string      `json:"name"`
	PhoneNumber  pgtype.Text `json:"phone_number"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.LoginID,
		arg.Email,
		arg.PasswordHash,
		arg.Name,
		arg.PhoneNumber,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LoginID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createGuest = `-- name: CreateGuest :one
UPDATE "guest_id_sequence" SET "value" = "value" + 1
WHERE "tab_id" = $1
RETURNING "value"
`

func (q *Queries) CreateGuest(ctx context.Context, tabID uuid.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, createGuest, tabID)
	var value int32
	err := row.Scan(&value)
	return value, err
}

const createGuestIDSequence = `-- name: CreateGuestIDSequence :exec
INSERT INTO "guest_id_sequence" ("tab_id") VALUES ($1)
`

func (q *Queries) CreateGuestIDSequence(ctx context.Context, tabID uuid.UUID) error {
	_, err := q.db.Exec(ctx, createGuestIDSequence, tabID)
	return err
}

const createMenuItem = `-- name: CreateMenuItem :one
INSERT INTO "menu_item" ("name", "description", "photo_pathinfo", "price", "portion_size", "available", "modifiers_config")
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, name, description, photo_pathinfo, price, portion_size, available, modifiers_config, created_at, updated_at, deleted_at
`

type CreateMenuItemParams struct {
	Name            string      `json:"name"`
	Description     pgtype.Text `json:"description"`
	PhotoPathinfo   pgtype.Text `json:"photo_pathinfo"`
	Price           int32       `json:"price"`
	PortionSize     int16       `json:"portion_size"`
	Available       bool        `json:"available"`
	ModifiersConfig []byte      `json:"modifiers_config"`
}

func (q *Queries) CreateMenuItem(ctx context.Context, arg CreateMenuItemParams) (MenuItem, error) {
	row := q.db.QueryRow(ctx, createMenuItem,
		arg.Name,
		arg.Description,
		arg.PhotoPathinfo,
		arg.Price,
		arg.PortionSize,
		arg.Available,
		arg.ModifiersConfig,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PhotoPathinfo,
		&i.Price,
		&i.PortionSize,
		&i.Available,
		&i.ModifiersConfig,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createMenuTag = `-- name: CreateMenuTag :one
INSERT INTO "menu_tag" ("value", "description", "dimension")
VALUES ($1, $2, $3)
RETURNING id, value, description, dimension, created_at, updated_at
`

type CreateMenuTagParams struct {
	Value       string      `json:"value"`
	Description pgtype.Text `json:"description"`
	Dimension   pgtype.Int2 `json:"dimension"`
}

func (q *Queries) CreateMenuTag(ctx context.Context, arg CreateMenuTagParams) (MenuTag, error) {
	row := q.db.QueryRow(ctx, createMenuTag, arg.Value, arg.Description, arg.Dimension)
	var i MenuTag
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.Description,
		&i.Dimension,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createMenuTagDimension = `-- name: CreateMenuTagDimension :one
INSERT INTO "menu_tag_dimension" ("value", "description")
VALUES ($1, $2)
RETURNING id, value, description, created_at, updated_at
`

type CreateMenuTagDimensionParams struct {
	Value       string      `json:"value"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateMenuTagDimension(ctx context.Context, arg CreateMenuTagDimensionParams) (MenuTagDimension, error) {
	row := q.db.QueryRow(ctx, createMenuTagDimension, arg.Value, arg.Description)
	var i MenuTagDimension
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
WITH "seq" AS (
    UPDATE "order_id_sequence" SET "value" = "value" + 1
    WHERE "tab_id" = $1
    RETURNING "value"
)
INSERT INTO "order" ("tab_id", "scoped_id")
SELECT $1, "seq"."value"
FROM "seq"
RETURNING "scoped_id"
`

func (q *Queries) CreateOrder(ctx context.Context, tabID uuid.UUID) (int16, error) {
	row := q.db.QueryRow(ctx, createOrder, tabID)
	var scoped_id int16
	err := row.Scan(&scoped_id)
	return scoped_id, err
}

const createOrderIDSequence = `-- name: CreateOrderIDSequence :exec
INSERT INTO "order_id_sequence" ("tab_id") VALUES ($1)
`

func (q *Queries) CreateOrderIDSequence(ctx context.Context, tabID uuid.UUID) error {
	_, err := q.db.Exec(ctx, createOrderIDSequence, tabID)
	return err
}

type CreateOrderItemsParams struct {
	TabID          uuid.UUID   `json:"tab_id"`
	OrderID        int16       `json:"order_id"`
	ScopedID       int16       `json:"scoped_id"`
	MenuItemID     int16       `json:"menu_item_id"`
	Quantity       int16       `json:"quantity"`
	Modifiers      []byte      `json:"modifiers"`
	GuestOwners    []int16     `json:"guest_owners"`
	CustomerOwners []uuid.UUID `json:"customer_owners"`
}

const createTab = `-- name: CreateTab :one
INSERT INTO "tab" DEFAULT VALUES
RETURNING "id", "created_at"
`

type CreateTabRow struct {
	ID        uuid.UUID        `json:"id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateTab(ctx context.Context) (CreateTabRow, error) {
	row := q.db.QueryRow(ctx, createTab)
	var i CreateTabRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const deleteGuestIDSequence = `-- name: DeleteGuestIDSequence :exec
DELETE FROM "guest_id_sequence" WHERE "tab_id" = $1
`

func (q *Queries) DeleteGuestIDSequence(ctx context.Context, tabID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGuestIDSequence, tabID)
	return err
}

const deleteNotSentOrders = `-- name: DeleteNotSentOrders :exec
DELETE FROM "order" WHERE "tab_id" = $1 AND "sent_at" IS NULL
`

func (q *Queries) DeleteNotSentOrders(ctx context.Context, tabID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteNotSentOrders, tabID)
	return err
}

const deleteOrderIDSequence = `-- name: DeleteOrderIDSequence :exec
DELETE FROM "order_id_sequence" WHERE "tab_id" = $1
`

func (q *Queries) DeleteOrderIDSequence(ctx context.Context, tabID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrderIDSequence, tabID)
	return err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM "order_item"
WHERE "tab_id" = $1 AND "order_id" = $2 AND "scoped_id" = $3
`

type DeleteOrderItemParams struct {
	TabID    uuid.UUID `json:"tab_id"`
	OrderID  int16     `json:"order_id"`
	ScopedID int16     `json:"scoped_id"`
}

func (q *Queries) DeleteOrderItem(ctx context.Context, arg DeleteOrderItemParams) error {
	_, err := q.db.Exec(ctx, deleteOrderItem, arg.TabID, arg.OrderID, arg.ScopedID)
	return err
}

const deleteOrderItems = `-- name: DeleteOrderItems :exec
DELETE FROM "order_item" WHERE "tab_id" = $1 AND "order_id" = $2
`

type DeleteOrderItemsParams struct {
	TabID   uuid.UUID `json:"tab_id"`
	OrderID int16     `json:"order_id"`
}

func (q *Queries) DeleteOrderItems(ctx context.Context, arg DeleteOrderItemsParams) error {
	_, err := q.db.Exec(ctx, deleteOrderItems, arg.TabID, arg.OrderID)
	return err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, login_id, email, password_hash, name, phone_number, created_at, updated_at FROM "customer" WHERE "id" = $1
`

func (q *Queries) GetCustomerByID(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LoginID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByLogin = `-- name: GetCustomerByLogin :one
SELECT id, login_id, email, password_hash, name, phone_number, created_at, updated_at FROM "customer" WHERE "login_id" = $1
`

func (q *Queries) GetCustomerByLogin(ctx context.Context, loginID string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByLogin, loginID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LoginID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMenuItem = `-- name: GetMenuItem :one
SELECT id, name, description, photo_pathinfo, price, portion_size, available, modifiers_config, created_at, updated_at, deleted_at FROM "menu_item" WHERE "id" = $1
`

func (q *Queries) GetMenuItem(ctx context.Context, id int16) (MenuItem, error) {
	row := q.db.QueryRow(ctx, getMenuItem, id)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PhotoPathinfo,
		&i.Price,
		&i.PortionSize,
		&i.Available,
		&i.ModifiersConfig,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getNotDeletedMenuItem = `-- name: GetNotDeletedMenuItem :one
SELECT id, name, description, photo_pathinfo, price, portion_size, available, modifiers_config, created_at, updated_at, deleted_at FROM "menu_item" WHERE "id" = $1 AND "deleted_at" IS NULL
`

func (q *Queries) GetNotDeletedMenuItem(ctx context.Context, id int16) (MenuItem, error) {
	row := q.db.QueryRow(ctx, getNotDeletedMenuItem, id)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PhotoPathinfo,
		&i.Price,
		&i.PortionSize,
		&i.Available,
		&i.ModifiersConfig,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOpenTabWithOrders = `-- name: GetOpenTabWithOrders :one
SELECT id, total_price, created_at, closed_at, guest_names, orders
FROM "tab_with_orders"
WHERE "id" = $1 AND "closed_at" IS NULL
`

func (q *Queries) GetOpenTabWithOrders(ctx context.Context, id uuid.UUID) (TabWithOrders, error) {
	row := q.db.QueryRow(ctx, getOpenTabWithOrders, id)
	var i TabWithOrders
	err := row.Scan(
		&i.ID,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.ClosedAt,
		&i.GuestNames,
		&i.Orders,
	)
	return i, err
}

const getOrderForNoKeyUpdate = `-- name: GetOrderForNoKeyUpdate :one
SELECT tab_id, scoped_id, sent_at FROM "order" WHERE "tab_id" = $1 AND "scoped_id" = $2 FOR NO KEY UPDATE
`

type GetOrderForNoKeyUpdateParams struct {
	TabID    uuid.UUID `json:"tab_id"`
	ScopedID int16     `json:"scoped_id"`
}

func (q *Queries) GetOrderForNoKeyUpdate(ctx context.Context, arg GetOrderForNoKeyUpdateParams) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderForNoKeyUpdate, arg.TabID, arg.ScopedID)
	var i Order
	err := row.Scan(&i.TabID, &i.ScopedID, &i.SentAt)
	return i, err
}

const getOrderForShare = `-- name: GetOrderForShare :one
SELECT tab_id, scoped_id, sent_at FROM "order" WHERE "tab_id" = $1 AND "scoped_id" = $2 FOR SHARE
`

type GetOrderForShareParams struct {
	TabID    uuid.UUID `json:"tab_id"`
	ScopedID int16     `json:"scoped_id"`
}

func (q *Queries) GetOrderForShare(ctx context.Context, arg GetOrderForShareParams) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderForShare, arg.TabID, arg.ScopedID)
	var i Order
	err := row.Scan(&i.TabID, &i.ScopedID, &i.SentAt)
	return i, err
}

const getOrderWithItems = `-- name: GetOrderWithItems :one
SELECT tab_id, scoped_id, sent_at, items FROM "order_with_items" WHERE "tab_id" = $1 AND "scoped_id" = $2
`

type GetOrderWithItemsParams struct {
	TabID    uuid.UUID `json:"tab_id"`
	ScopedID int16     `json:"scoped_id"`
}

func (q *Queries) GetOrderWithItems(ctx context.Context, arg GetOrderWithItemsParams) (OrderWithItems, error) {
	row := q.db.QueryRow(ctx, getOrderWithItems, arg.TabID, arg.ScopedID)
	var i OrderWithItems
	err := row.Scan(
		&i.TabID,
		&i.ScopedID,
		&i.SentAt,
		&i.Items,
	)
	return i, err
}

const getTabForNoKeyUpdate = `-- name: GetTabForNoKeyUpdate :one
SELECT id, total_price, created_at, closed_at, guest_names FROM "tab" WHERE "id" = $1 FOR NO KEY UPDATE
`

func (q *Queries) GetTabForNoKeyUpdate(ctx context.Context, id uuid.UUID) (Tab, error) {
	row := q.db.QueryRow(ctx, getTabForNoKeyUpdate, id)
	var i Tab
	err := row.Scan(
		&i.ID,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.ClosedAt,
		&i.GuestNames,
	)
	return i, err
}

const getTabForShare = `-- name: GetTabForShare :one
SELECT id, total_price, created_at, closed_at, guest_names FROM "tab" WHERE "id" = $1 FOR SHARE
`

func (q *Queries) GetTabForShare(ctx context.Context, id uuid.UUID) (Tab, error) {
	row := q.db.QueryRow(ctx, getTabForShare, id)
	var i Tab
	err := row.Scan(
		&i.ID,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.ClosedAt,
		&i.GuestNames,
	)
	return i, err
}

const getTabWithOrdersForShare = `-- name: GetTabWithOrdersForShare :one
SELECT t.id, t.total_price, t.created_at, t.closed_at, t.guest_names, "o"."orders"
FROM "tab" AS "t",
(
    SELECT json_agg("o") AS "orders"
    FROM (
        SELECT o.tab_id, o.scoped_id, o.sent_at, "oi"."items"
        FROM "order" AS "o"
        LEFT JOIN (
            SELECT "oi"."order_id", json_agg("oi") AS "items" FROM (
                SELECT oi.tab_id, oi.order_id, oi.scoped_id, oi.menu_item_id, oi.quantity, oi.modifiers, oi.guest_owners, oi.customer_owners, "mi"."name", "mi"."description", "mi"."photo_pathinfo", "mi"."price", "mi"."portion_size", "mi"."modifiers_config"
                FROM "order_item" AS "oi"
                JOIN "menu_item" AS "mi" ON "oi"."menu_item_id" = "mi"."id"
                WHERE "oi"."tab_id" = $1
                FOR SHARE
            ) "oi"
            GROUP BY "oi"."order_id"
        ) "oi"
        ON "o"."scoped_id" = "oi"."order_id"
        WHERE "o"."tab_id" = $1
        FOR SHARE OF "o"
    ) "o"
) "o"
WHERE "t"."id" = $1
FOR SHARE OF "t"
`

type GetTabWithOrdersForShareRow struct {
	ID         uuid.UUID        `json:"id"`
	TotalPrice int32            `json:"total_price"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	ClosedAt   pgtype.Timestamp `json:"closed_at"`
	GuestNames map[int16]string `json:"guest_names"`
	Orders     []byte           `json:"orders"`
}

func (q *Queries) GetTabWithOrdersForShare(ctx context.Context, tabID uuid.UUID) (GetTabWithOrdersForShareRow, error) {
	row := q.db.QueryRow(ctx, getTabWithOrdersForShare, tabID)
	var i GetTabWithOrdersForShareRow
	err := row.Scan(
		&i.ID,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.ClosedAt,
		&i.GuestNames,
		&i.Orders,
	)
	return i, err
}

const getVisitedTabsWithOrders = `-- name: GetVisitedTabsWithOrders :many
SELECT t.id, t.total_price, t.created_at, t.closed_at, t.guest_names, t.orders
FROM "tab_with_orders" t
JOIN "visitation" v ON t."id" = v."tab_id"
WHERE v."customer_id" = $1
`

func (q *Queries) GetVisitedTabsWithOrders(ctx context.Context, customerID uuid.UUID) ([]TabWithOrders, error) {
	rows, err := q.db.Query(ctx, getVisitedTabsWithOrders, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TabWithOrders
	for rows.Next() {
		var i TabWithOrders
		if err := rows.Scan(
			&i.ID,
			&i.TotalPrice,
			&i.CreatedAt,
			&i.ClosedAt,
			&i.GuestNames,
			&i.Orders,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isVisitingCustomerIDs = `-- name: IsVisitingCustomerIDs :many
SELECT "customer_id"
FROM "visitation"
WHERE "tab_id" = $1 AND "customer_id" = ANY($2::UUID[])
`

type IsVisitingCustomerIDsParams struct {
	TabID       uuid.UUID   `json:"tab_id"`
	CustomerIds []uuid.UUID `json:"customer_ids"`
}

func (q *Queries) IsVisitingCustomerIDs(ctx context.Context, arg IsVisitingCustomerIDsParams) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, isVisitingCustomerIDs, arg.TabID, arg.CustomerIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var customer_id uuid.UUID
		if err := rows.Scan(&customer_id); err != nil {
			return nil, err
		}
		items = append(items, customer_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMenuItems = `-- name: ListMenuItems :many
SELECT id, name, description, photo_pathinfo, price, portion_size, available, modifiers_config, created_at, updated_at, deleted_at FROM "menu_item" WHERE "deleted_at" IS NULL ORDER BY "name"
`

func (q *Queries) ListMenuItems(ctx context.Context) ([]MenuItem, error) {
	rows, err := q.db.Query(ctx, listMenuItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuItem
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PhotoPathinfo,
			&i.Price,
			&i.PortionSize,
			&i.Available,
			&i.ModifiersConfig,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMenuTagDimensions = `-- name: ListMenuTagDimensions :many
SELECT id, value, description, created_at, updated_at FROM "menu_tag_dimension" ORDER BY "value"
`

func (q *Queries) ListMenuTagDimensions(ctx context.Context) ([]MenuTagDimension, error) {
	rows, err := q.db.Query(ctx, listMenuTagDimensions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuTagDimension
	for rows.Next() {
		var i MenuTagDimension
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMenuTags = `-- name: ListMenuTags :many
SELECT id, value, description, dimension, created_at, updated_at FROM "menu_tag" ORDER BY "value"
`

func (q *Queries) ListMenuTags(ctx context.Context) ([]MenuTag, error) {
	rows, err := q.db.Query(ctx, listMenuTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuTag
	for rows.Next() {
		var i MenuTag
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.Description,
			&i.Dimension,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeOrderItemCustomerOwner = `-- name: RemoveOrderItemCustomerOwner :exec
UPDATE "order_item" SET "customer_owners" = array_remove("customer_owners", $4::UUID)
WHERE "tab_id" = $1 AND "order_id" = $2 AND "scoped_id" = $3 AND $4::UUID = ANY("customer_owners")
`

type RemoveOrderItemCustomerOwnerParams struct {
	TabID      uuid.UUID `json:"tab_id"`
	OrderID    int16     `json:"order_id"`
	ScopedID   int16     `json:"scoped_id"`
	CustomerID uuid.UUID `json:"customer_id"`
}

func (q *Queries) RemoveOrderItemCustomerOwner(ctx context.Context, arg RemoveOrderItemCustomerOwnerParams) error {
	_, err := q.db.Exec(ctx, removeOrderItemCustomerOwner,
		arg.TabID,
		arg.OrderID,
		arg.ScopedID,
		arg.CustomerID,
	)
	return err
}

const removeOrderItemGuestOwner = `-- name: RemoveOrderItemGuestOwner :exec
UPDATE "order_item" SET "guest_owners" = array_remove("guest_owners", $4::SMALLINT)
WHERE "tab_id" = $1 AND "order_id" = $2 AND "scoped_id" = $3 AND $4::SMALLINT = ANY("guest_owners")
`

type RemoveOrderItemGuestOwnerParams struct {
	TabID    uuid.UUID `json:"tab_id"`
	OrderID  int16     `json:"order_id"`
	ScopedID int16     `json:"scoped_id"`
	GuestID  int16     `json:"guest_id"`
}

func (q *Queries) RemoveOrderItemGuestOwner(ctx context.Context, arg RemoveOrderItemGuestOwnerParams) error {
	_, err := q.db.Exec(ctx, removeOrderItemGuestOwner,
		arg.TabID,
		arg.OrderID,
		arg.ScopedID,
		arg.GuestID,
	)
	return err
}

const sendOrder = `-- name: SendOrder :exec
UPDATE "order" SET "sent_at" = NOW() WHERE "tab_id" = $1 AND "scoped_id" = $2
`

type SendOrderParams struct {
	TabID    uuid.UUID `json:"tab_id"`
	ScopedID int16     `json:"scoped_id"`
}

func (q *Queries) SendOrder(ctx context.Context, arg SendOrderParams) error {
	_, err := q.db.Exec(ctx, sendOrder, arg.TabID, arg.ScopedID)
	return err
}

const softDeleteMenuItem = `-- name: SoftDeleteMenuItem :exec
UPDATE "menu_item" SET "deleted_at" = COALESCE("deleted_at", NOW()) WHERE "id" = $1
`

func (q *Queries) SoftDeleteMenuItem(ctx context.Context, id int16) error {
	_, err := q.db.Exec(ctx, softDeleteMenuItem, id)
	return err
}

const updateCustomerEmail = `-- name: UpdateCustomerEmail :one
UPDATE "customer" SET "email" = $2 WHERE "id" = $1
RETURNING id, login_id, email, password_hash, name, phone_number, created_at, updated_at
`

type UpdateCustomerEmailParams struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

func (q *Queries) UpdateCustomerEmail(ctx context.Context, arg UpdateCustomerEmailParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomerEmail, arg.ID, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LoginID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCustomerInfo = `-- name: UpdateCustomerInfo :one
UPDATE "customer" SET "name" = $2, "phone_number" = $3 WHERE "id" = $1
RETURNING id, login_id, email, password_hash, name, phone_number, created_at, updated_at
`

type UpdateCustomerInfoParams struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	PhoneNumber pgtype.Text `json:"phone_number"`
}

func (q *Queries) UpdateCustomerInfo(ctx context.Context, arg UpdateCustomerInfoParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomerInfo, arg.ID, arg.Name, arg.PhoneNumber)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LoginID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCustomerLoginID = `-- name: UpdateCustomerLoginID :one
UPDATE "customer" SET "login_id" = $2 WHERE "id" = $1
RETURNING id, login_id, email, password_hash, name, phone_number, created_at, updated_at
`

type UpdateCustomerLoginIDParams struct {
	ID      uuid.UUID `json:"id"`
	LoginID string    `json:"login_id"`
}

func (q *Queries) UpdateCustomerLoginID(ctx context.Context, arg UpdateCustomerLoginIDParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomerLoginID, arg.ID, arg.LoginID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LoginID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCustomerPassword = `-- name: UpdateCustomerPassword :one
UPDATE "customer" SET "password_hash" = $2 WHERE "id" = $1
RETURNING id, login_id, email, password_hash, name, phone_number, created_at, updated_at
`

type UpdateCustomerPasswordParams struct {
	ID           uuid.UUID `json:"id"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) UpdateCustomerPassword(ctx context.Context, arg UpdateCustomerPasswordParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomerPassword, arg.ID, arg.PasswordHash)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LoginID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateGuestName = `-- name: UpdateGuestName :exec
UPDATE "tab" SET "guest_names" = jsonb_set(
    COALESCE("guest_names", '{}'),
    ('{' || $2::SMALLINT || '}')::TEXT[],
    to_jsonb($3::TEXT)
)
WHERE "id" = $1
`

type UpdateGuestNameParams struct {
	ID       uuid.UUID `json:"id"`
	ScopedID int16     `json:"scoped_id"`
	Name     string    `json:"name"`
}

func (q *Queries) UpdateGuestName(ctx context.Context, arg UpdateGuestNameParams) error {
	_, err := q.db.Exec(ctx, updateGuestName, arg.ID, arg.ScopedID, arg.Name)
	return err
}

const updateMenuItem = `-- name: UpdateMenuItem :one
UPDATE "menu_item" SET "name" = $2, "description" = $3, "photo_pathinfo" = $4, "price" = $5, "portion_size" = $6, "available" = $7, "modifiers_config" = $8, "updated_at" = NOW()
WHERE "id" = $1
RETURNING id, name, description, photo_pathinfo, price, portion_size, available, modifiers_config, created_at, updated_at, deleted_at
`

type UpdateMenuItemParams struct {
	ID              int16       `json:"id"`
	Name            string      `json:"name"`
	Description     pgtype.Text `json:"description"`
	PhotoPathinfo   pgtype.Text `json:"photo_pathinfo"`
	Price           int32       `json:"price"`
	PortionSize     int16       `json:"portion_size"`
	Available       bool        `json:"available"`
	ModifiersConfig []byte      `json:"modifiers_config"`
}

func (q *Queries) UpdateMenuItem(ctx context.Context, arg UpdateMenuItemParams) (MenuItem, error) {
	row := q.db.QueryRow(ctx, updateMenuItem,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.PhotoPathinfo,
		arg.Price,
		arg.PortionSize,
		arg.Available,
		arg.ModifiersConfig,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PhotoPathinfo,
		&i.Price,
		&i.PortionSize,
		&i.Available,
		&i.ModifiersConfig,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateOrderItemModifiers = `-- name: UpdateOrderItemModifiers :exec
UPDATE "order_item" SET "modifiers" = $4
WHERE "tab_id" = $1 AND "order_id" = $2 AND "scoped_id" = $3
`

type UpdateOrderItemModifiersParams struct {
	TabID     uuid.UUID `json:"tab_id"`
	OrderID   int16     `json:"order_id"`
	ScopedID  int16     `json:"scoped_id"`
	Modifiers []byte    `json:"modifiers"`
}

func (q *Queries) UpdateOrderItemModifiers(ctx context.Context, arg UpdateOrderItemModifiersParams) error {
	_, err := q.db.Exec(ctx, updateOrderItemModifiers,
		arg.TabID,
		arg.OrderID,
		arg.ScopedID,
		arg.Modifiers,
	)
	return err
}

const updateOrderItemQuantity = `-- name: UpdateOrderItemQuantity :exec
UPDATE "order_item" SET "quantity" = $4
WHERE "tab_id" = $1 AND "order_id" = $2 AND "scoped_id" = $3
`

type UpdateOrderItemQuantityParams struct {
	TabID    uuid.UUID `json:"tab_id"`
	OrderID  int16     `json:"order_id"`
	ScopedID int16     `json:"scoped_id"`
	Quantity int16     `json:"quantity"`
}

func (q *Queries) UpdateOrderItemQuantity(ctx context.Context, arg UpdateOrderItemQuantityParams) error {
	_, err := q.db.Exec(ctx, updateOrderItemQuantity,
		arg.TabID,
		arg.OrderID,
		arg.ScopedID,
		arg.Quantity,
	)
	return err
}

const updateTabTotalPrice = `-- name: UpdateTabTotalPrice :exec
UPDATE "tab" SET "total_price" = COALESCE((
    SELECT SUM(mi."price" * oi."quantity")
    FROM "order" o
    JOIN "order_item" oi ON o."tab_id" = oi."tab_id" AND o."scoped_id" = oi."order_id"
    JOIN "menu_item" mi ON oi."menu_item_id" = mi."id"
    WHERE o."tab_id" = $1 AND o."sent_at" IS NOT NULL
), 0)
WHERE "id" = $1
`

func (q *Queries) UpdateTabTotalPrice(ctx context.Context, tabID uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateTabTotalPrice, tabID)
	return err
}

const visitTab = `-- name: VisitTab :exec
INSERT INTO "visitation" ("tab_id", "customer_id")
VALUES ($1, $2)
ON CONFLICT ("tab_id", "customer_id") DO NOTHING
`

type VisitTabParams struct {
	TabID      uuid.UUID `json:"tab_id"`
	CustomerID uuid.UUID `json:"customer_id"`
}

func (q *Queries) VisitTab(ctx context.Context, arg VisitTabParams) error {
	_, err := q.db.Exec(ctx, visitTab, arg.TabID, arg.CustomerID)
	return err
}
