// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: restaurant.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CustomerService_CreateCustomer_FullMethodName  = "/restaurant.CustomerService/CreateCustomer"
	CustomerService_GetCustomerByID_FullMethodName = "/restaurant.CustomerService/GetCustomerByID"
)

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceClient interface {
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*Customer, error)
	GetCustomerByID(ctx context.Context, in *GetCustomerByIDRequest, opts ...grpc.CallOption) (*Customer, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Customer)
	err := c.cc.Invoke(ctx, CustomerService_CreateCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerByID(ctx context.Context, in *GetCustomerByIDRequest, opts ...grpc.CallOption) (*Customer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Customer)
	err := c.cc.Invoke(ctx, CustomerService_GetCustomerByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations must embed UnimplementedCustomerServiceServer
// for forward compatibility.
type CustomerServiceServer interface {
	CreateCustomer(context.Context, *CreateCustomerRequest) (*Customer, error)
	GetCustomerByID(context.Context, *GetCustomerByIDRequest) (*Customer, error)
	mustEmbedUnimplementedCustomerServiceServer()
}

// UnimplementedCustomerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCustomerServiceServer struct{}

func (UnimplementedCustomerServiceServer) CreateCustomer(context.Context, *CreateCustomerRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) GetCustomerByID(context.Context, *GetCustomerByIDRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerByID not implemented")
}
func (UnimplementedCustomerServiceServer) mustEmbedUnimplementedCustomerServiceServer() {}
func (UnimplementedCustomerServiceServer) testEmbeddedByValue()                         {}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	// If the following call pancis, it indicates UnimplementedCustomerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CustomerService_ServiceDesc, srv)
}

func _CustomerService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_CreateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetCustomerByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerByID(ctx, req.(*GetCustomerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerService_ServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _CustomerService_CreateCustomer_Handler,
		},
		{
			MethodName: "GetCustomerByID",
			Handler:    _CustomerService_GetCustomerByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "restaurant.proto",
}

const (
	AuthService_GenerateToken_FullMethodName = "/restaurant.AuthService/GenerateToken"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_GenerateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
type AuthServiceServer interface {
	GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenerateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateToken",
			Handler:    _AuthService_GenerateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "restaurant.proto",
}

const (
	MenuService_CreateMenuItem_FullMethodName = "/restaurant.MenuService/CreateMenuItem"
	MenuService_GetMenuItem_FullMethodName    = "/restaurant.MenuService/GetMenuItem"
	MenuService_ListMenuItems_FullMethodName  = "/restaurant.MenuService/ListMenuItems"
	MenuService_UpdateMenuItem_FullMethodName = "/restaurant.MenuService/UpdateMenuItem"
	MenuService_DeleteMenuItem_FullMethodName = "/restaurant.MenuService/DeleteMenuItem"
)

// MenuServiceClient is the client API for MenuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuServiceClient interface {
	CreateMenuItem(ctx context.Context, in *CreateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error)
	GetMenuItem(ctx context.Context, in *GetMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error)
	ListMenuItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMenuItemsResponse, error)
	UpdateMenuItem(ctx context.Context, in *UpdateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error)
	DeleteMenuItem(ctx context.Context, in *DeleteMenuItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type menuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuServiceClient(cc grpc.ClientConnInterface) MenuServiceClient {
	return &menuServiceClient{cc}
}

func (c *menuServiceClient) CreateMenuItem(ctx context.Context, in *CreateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuItem)
	err := c.cc.Invoke(ctx, MenuService_CreateMenuItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) GetMenuItem(ctx context.Context, in *GetMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuItem)
	err := c.cc.Invoke(ctx, MenuService_GetMenuItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) ListMenuItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMenuItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMenuItemsResponse)
	err := c.cc.Invoke(ctx, MenuService_ListMenuItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) UpdateMenuItem(ctx context.Context, in *UpdateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuItem)
	err := c.cc.Invoke(ctx, MenuService_UpdateMenuItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) DeleteMenuItem(ctx context.Context, in *DeleteMenuItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MenuService_DeleteMenuItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuServiceServer is the server API for MenuService service.
// All implementations must embed UnimplementedMenuServiceServer
// for forward compatibility.
type MenuServiceServer interface {
	CreateMenuItem(context.Context, *CreateMenuItemRequest) (*MenuItem, error)
	GetMenuItem(context.Context, *GetMenuItemRequest) (*MenuItem, error)
	ListMenuItems(context.Context, *emptypb.Empty) (*ListMenuItemsResponse, error)
	UpdateMenuItem(context.Context, *UpdateMenuItemRequest) (*MenuItem, error)
	DeleteMenuItem(context.Context, *DeleteMenuItemRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMenuServiceServer()
}

// UnimplementedMenuServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMenuServiceServer struct{}

func (UnimplementedMenuServiceServer) CreateMenuItem(context.Context, *CreateMenuItemRequest) (*MenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenuItem not implemented")
}
func (UnimplementedMenuServiceServer) GetMenuItem(context.Context, *GetMenuItemRequest) (*MenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuItem not implemented")
}
func (UnimplementedMenuServiceServer) ListMenuItems(context.Context, *emptypb.Empty) (*ListMenuItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenuItems not implemented")
}
func (UnimplementedMenuServiceServer) UpdateMenuItem(context.Context, *UpdateMenuItemRequest) (*MenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuItem not implemented")
}
func (UnimplementedMenuServiceServer) DeleteMenuItem(context.Context, *DeleteMenuItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenuItem not implemented")
}
func (UnimplementedMenuServiceServer) mustEmbedUnimplementedMenuServiceServer() {}
func (UnimplementedMenuServiceServer) testEmbeddedByValue()                     {}

// UnsafeMenuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuServiceServer will
// result in compilation errors.
type UnsafeMenuServiceServer interface {
	mustEmbedUnimplementedMenuServiceServer()
}

func RegisterMenuServiceServer(s grpc.ServiceRegistrar, srv MenuServiceServer) {
	// If the following call pancis, it indicates UnimplementedMenuServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MenuService_ServiceDesc, srv)
}

func _MenuService_CreateMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).CreateMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_CreateMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).CreateMenuItem(ctx, req.(*CreateMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_GetMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).GetMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_GetMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).GetMenuItem(ctx, req.(*GetMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_ListMenuItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).ListMenuItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_ListMenuItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).ListMenuItems(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_UpdateMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).UpdateMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_UpdateMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).UpdateMenuItem(ctx, req.(*UpdateMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_DeleteMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).DeleteMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_DeleteMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).DeleteMenuItem(ctx, req.(*DeleteMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MenuService_ServiceDesc is the grpc.ServiceDesc for MenuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MenuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant.MenuService",
	HandlerType: (*MenuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMenuItem",
			Handler:    _MenuService_CreateMenuItem_Handler,
		},
		{
			MethodName: "GetMenuItem",
			Handler:    _MenuService_GetMenuItem_Handler,
		},
		{
			MethodName: "ListMenuItems",
			Handler:    _MenuService_ListMenuItems_Handler,
		},
		{
			MethodName: "UpdateMenuItem",
			Handler:    _MenuService_UpdateMenuItem_Handler,
		},
		{
			MethodName: "DeleteMenuItem",
			Handler:    _MenuService_DeleteMenuItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "restaurant.proto",
}

const (
	OrderService_CreateOrderItem_FullMethodName              = "/restaurant.OrderService/CreateOrderItem"
	OrderService_DeleteOrderItem_FullMethodName              = "/restaurant.OrderService/DeleteOrderItem"
	OrderService_UpdateOrderItemModifiers_FullMethodName     = "/restaurant.OrderService/UpdateOrderItemModifiers"
	OrderService_UpdateOrderItemQuantity_FullMethodName      = "/restaurant.OrderService/UpdateOrderItemQuantity"
	OrderService_AddOrderItemGuestOwner_FullMethodName       = "/restaurant.OrderService/AddOrderItemGuestOwner"
	OrderService_RemoveOrderItemGuestOwner_FullMethodName    = "/restaurant.OrderService/RemoveOrderItemGuestOwner"
	OrderService_AddOrderItemCustomerOwner_FullMethodName    = "/restaurant.OrderService/AddOrderItemCustomerOwner"
	OrderService_RemoveOrderItemCustomerOwner_FullMethodName = "/restaurant.OrderService/RemoveOrderItemCustomerOwner"
	OrderService_SendOrder_FullMethodName                    = "/restaurant.OrderService/SendOrder"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	CreateOrderItem(ctx context.Context, in *CreateOrderItemRequest, opts ...grpc.CallOption) (*OrderItemID, error)
	DeleteOrderItem(ctx context.Context, in *DeleteOrderItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateOrderItemModifiers(ctx context.Context, in *UpdateOrderItemModifiersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateOrderItemQuantity(ctx context.Context, in *UpdateOrderItemQuantityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddOrderItemGuestOwner(ctx context.Context, in *AddOrderItemGuestOwnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveOrderItemGuestOwner(ctx context.Context, in *RemoveOrderItemGuestOwnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddOrderItemCustomerOwner(ctx context.Context, in *AddOrderItemCustomerOwnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveOrderItemCustomerOwner(ctx context.Context, in *RemoveOrderItemCustomerOwnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendOrder(ctx context.Context, in *SendOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateOrderItem(ctx context.Context, in *CreateOrderItemRequest, opts ...grpc.CallOption) (*OrderItemID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderItemID)
	err := c.cc.Invoke(ctx, OrderService_CreateOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) DeleteOrderItem(ctx context.Context, in *DeleteOrderItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderService_DeleteOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateOrderItemModifiers(ctx context.Context, in *UpdateOrderItemModifiersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderService_UpdateOrderItemModifiers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateOrderItemQuantity(ctx context.Context, in *UpdateOrderItemQuantityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderService_UpdateOrderItemQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) AddOrderItemGuestOwner(ctx context.Context, in *AddOrderItemGuestOwnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderService_AddOrderItemGuestOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) RemoveOrderItemGuestOwner(ctx context.Context, in *RemoveOrderItemGuestOwnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderService_RemoveOrderItemGuestOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) AddOrderItemCustomerOwner(ctx context.Context, in *AddOrderItemCustomerOwnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderService_AddOrderItemCustomerOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) RemoveOrderItemCustomerOwner(ctx context.Context, in *RemoveOrderItemCustomerOwnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderService_RemoveOrderItemCustomerOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) SendOrder(ctx context.Context, in *SendOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderService_SendOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility.
type OrderServiceServer interface {
	CreateOrderItem(context.Context, *CreateOrderItemRequest) (*OrderItemID, error)
	DeleteOrderItem(context.Context, *DeleteOrderItemRequest) (*emptypb.Empty, error)
	UpdateOrderItemModifiers(context.Context, *UpdateOrderItemModifiersRequest) (*emptypb.Empty, error)
	UpdateOrderItemQuantity(context.Context, *UpdateOrderItemQuantityRequest) (*emptypb.Empty, error)
	AddOrderItemGuestOwner(context.Context, *AddOrderItemGuestOwnerRequest) (*emptypb.Empty, error)
	RemoveOrderItemGuestOwner(context.Context, *RemoveOrderItemGuestOwnerRequest) (*emptypb.Empty, error)
	AddOrderItemCustomerOwner(context.Context, *AddOrderItemCustomerOwnerRequest) (*emptypb.Empty, error)
	RemoveOrderItemCustomerOwner(context.Context, *RemoveOrderItemCustomerOwnerRequest) (*emptypb.Empty, error)
	SendOrder(context.Context, *SendOrderRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServiceServer struct{}

func (UnimplementedOrderServiceServer) CreateOrderItem(context.Context, *CreateOrderItemRequest) (*OrderItemID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderItem not implemented")
}
func (UnimplementedOrderServiceServer) DeleteOrderItem(context.Context, *DeleteOrderItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderItem not implemented")
}
func (UnimplementedOrderServiceServer) UpdateOrderItemModifiers(context.Context, *UpdateOrderItemModifiersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderItemModifiers not implemented")
}
func (UnimplementedOrderServiceServer) UpdateOrderItemQuantity(context.Context, *UpdateOrderItemQuantityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderItemQuantity not implemented")
}
func (UnimplementedOrderServiceServer) AddOrderItemGuestOwner(context.Context, *AddOrderItemGuestOwnerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderItemGuestOwner not implemented")
}
func (UnimplementedOrderServiceServer) RemoveOrderItemGuestOwner(context.Context, *RemoveOrderItemGuestOwnerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrderItemGuestOwner not implemented")
}
func (UnimplementedOrderServiceServer) AddOrderItemCustomerOwner(context.Context, *AddOrderItemCustomerOwnerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderItemCustomerOwner not implemented")
}
func (UnimplementedOrderServiceServer) RemoveOrderItemCustomerOwner(context.Context, *RemoveOrderItemCustomerOwnerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrderItemCustomerOwner not implemented")
}
func (UnimplementedOrderServiceServer) SendOrder(context.Context, *SendOrderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOrder not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}
func (UnimplementedOrderServiceServer) testEmbeddedByValue()                      {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreateOrderItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrderItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateOrderItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrderItem(ctx, req.(*CreateOrderItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_DeleteOrderItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).DeleteOrderItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_DeleteOrderItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).DeleteOrderItem(ctx, req.(*DeleteOrderItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateOrderItemModifiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderItemModifiersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrderItemModifiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdateOrderItemModifiers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrderItemModifiers(ctx, req.(*UpdateOrderItemModifiersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateOrderItemQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderItemQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrderItemQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdateOrderItemQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrderItemQuantity(ctx, req.(*UpdateOrderItemQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_AddOrderItemGuestOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderItemGuestOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AddOrderItemGuestOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_AddOrderItemGuestOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AddOrderItemGuestOwner(ctx, req.(*AddOrderItemGuestOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_RemoveOrderItemGuestOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrderItemGuestOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).RemoveOrderItemGuestOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_RemoveOrderItemGuestOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).RemoveOrderItemGuestOwner(ctx, req.(*RemoveOrderItemGuestOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_AddOrderItemCustomerOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderItemCustomerOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AddOrderItemCustomerOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_AddOrderItemCustomerOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AddOrderItemCustomerOwner(ctx, req.(*AddOrderItemCustomerOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_RemoveOrderItemCustomerOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrderItemCustomerOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).RemoveOrderItemCustomerOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_RemoveOrderItemCustomerOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).RemoveOrderItemCustomerOwner(ctx, req.(*RemoveOrderItemCustomerOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_SendOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).SendOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_SendOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).SendOrder(ctx, req.(*SendOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrderItem",
			Handler:    _OrderService_CreateOrderItem_Handler,
		},
		{
			MethodName: "DeleteOrderItem",
			Handler:    _OrderService_DeleteOrderItem_Handler,
		},
		{
			MethodName: "UpdateOrderItemModifiers",
			Handler:    _OrderService_UpdateOrderItemModifiers_Handler,
		},
		{
			MethodName: "UpdateOrderItemQuantity",
			Handler:    _OrderService_UpdateOrderItemQuantity_Handler,
		},
		{
			MethodName: "AddOrderItemGuestOwner",
			Handler:    _OrderService_AddOrderItemGuestOwner_Handler,
		},
		{
			MethodName: "RemoveOrderItemGuestOwner",
			Handler:    _OrderService_RemoveOrderItemGuestOwner_Handler,
		},
		{
			MethodName: "AddOrderItemCustomerOwner",
			Handler:    _OrderService_AddOrderItemCustomerOwner_Handler,
		},
		{
			MethodName: "RemoveOrderItemCustomerOwner",
			Handler:    _OrderService_RemoveOrderItemCustomerOwner_Handler,
		},
		{
			MethodName: "SendOrder",
			Handler:    _OrderService_SendOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "restaurant.proto",
}

const (
	TabService_CreateTab_FullMethodName       = "/restaurant.TabService/CreateTab"
	TabService_VisitTab_FullMethodName        = "/restaurant.TabService/VisitTab"
	TabService_CreateGuest_FullMethodName     = "/restaurant.TabService/CreateGuest"
	TabService_UpdateGuestName_FullMethodName = "/restaurant.TabService/UpdateGuestName"
	TabService_GetOpenTab_FullMethodName      = "/restaurant.TabService/GetOpenTab"
	TabService_CloseTab_FullMethodName        = "/restaurant.TabService/CloseTab"
	TabService_GetVisitedTabs_FullMethodName  = "/restaurant.TabService/GetVisitedTabs"
)

// TabServiceClient is the client API for TabService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TabServiceClient interface {
	CreateTab(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TabID, error)
	VisitTab(ctx context.Context, in *VisitTabRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateGuest(ctx context.Context, in *CreateGuestRequest, opts ...grpc.CallOption) (*GuestID, error)
	UpdateGuestName(ctx context.Context, in *UpdateGuestNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetOpenTab(ctx context.Context, in *GetOpenTabRequest, opts ...grpc.CallOption) (*Tab, error)
	CloseTab(ctx context.Context, in *CloseTabRequest, opts ...grpc.CallOption) (*CloseTabResponse, error)
	GetVisitedTabs(ctx context.Context, in *GetVisitedTabsRequest, opts ...grpc.CallOption) (*GetVisitedTabsResponse, error)
}

type tabServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTabServiceClient(cc grpc.ClientConnInterface) TabServiceClient {
	return &tabServiceClient{cc}
}

func (c *tabServiceClient) CreateTab(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TabID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TabID)
	err := c.cc.Invoke(ctx, TabService_CreateTab_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabServiceClient) VisitTab(ctx context.Context, in *VisitTabRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TabService_VisitTab_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabServiceClient) CreateGuest(ctx context.Context, in *CreateGuestRequest, opts ...grpc.CallOption) (*GuestID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuestID)
	err := c.cc.Invoke(ctx, TabService_CreateGuest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabServiceClient) UpdateGuestName(ctx context.Context, in *UpdateGuestNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TabService_UpdateGuestName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabServiceClient) GetOpenTab(ctx context.Context, in *GetOpenTabRequest, opts ...grpc.CallOption) (*Tab, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tab)
	err := c.cc.Invoke(ctx, TabService_GetOpenTab_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabServiceClient) CloseTab(ctx context.Context, in *CloseTabRequest, opts ...grpc.CallOption) (*CloseTabResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseTabResponse)
	err := c.cc.Invoke(ctx, TabService_CloseTab_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabServiceClient) GetVisitedTabs(ctx context.Context, in *GetVisitedTabsRequest, opts ...grpc.CallOption) (*GetVisitedTabsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVisitedTabsResponse)
	err := c.cc.Invoke(ctx, TabService_GetVisitedTabs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TabServiceServer is the server API for TabService service.
// All implementations must embed UnimplementedTabServiceServer
// for forward compatibility.
type TabServiceServer interface {
	CreateTab(context.Context, *emptypb.Empty) (*TabID, error)
	VisitTab(context.Context, *VisitTabRequest) (*emptypb.Empty, error)
	CreateGuest(context.Context, *CreateGuestRequest) (*GuestID, error)
	UpdateGuestName(context.Context, *UpdateGuestNameRequest) (*emptypb.Empty, error)
	GetOpenTab(context.Context, *GetOpenTabRequest) (*Tab, error)
	CloseTab(context.Context, *CloseTabRequest) (*CloseTabResponse, error)
	GetVisitedTabs(context.Context, *GetVisitedTabsRequest) (*GetVisitedTabsResponse, error)
	mustEmbedUnimplementedTabServiceServer()
}

// UnimplementedTabServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTabServiceServer struct{}

func (UnimplementedTabServiceServer) CreateTab(context.Context, *emptypb.Empty) (*TabID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTab not implemented")
}
func (UnimplementedTabServiceServer) VisitTab(context.Context, *VisitTabRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VisitTab not implemented")
}
func (UnimplementedTabServiceServer) CreateGuest(context.Context, *CreateGuestRequest) (*GuestID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuest not implemented")
}
func (UnimplementedTabServiceServer) UpdateGuestName(context.Context, *UpdateGuestNameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuestName not implemented")
}
func (UnimplementedTabServiceServer) GetOpenTab(context.Context, *GetOpenTabRequest) (*Tab, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenTab not implemented")
}
func (UnimplementedTabServiceServer) CloseTab(context.Context, *CloseTabRequest) (*CloseTabResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTab not implemented")
}
func (UnimplementedTabServiceServer) GetVisitedTabs(context.Context, *GetVisitedTabsRequest) (*GetVisitedTabsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisitedTabs not implemented")
}
func (UnimplementedTabServiceServer) mustEmbedUnimplementedTabServiceServer() {}
func (UnimplementedTabServiceServer) testEmbeddedByValue()                    {}

// UnsafeTabServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TabServiceServer will
// result in compilation errors.
type UnsafeTabServiceServer interface {
	mustEmbedUnimplementedTabServiceServer()
}

func RegisterTabServiceServer(s grpc.ServiceRegistrar, srv TabServiceServer) {
	// If the following call pancis, it indicates UnimplementedTabServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TabService_ServiceDesc, srv)
}

func _TabService_CreateTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabServiceServer).CreateTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabService_CreateTab_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabServiceServer).CreateTab(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabService_VisitTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisitTabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabServiceServer).VisitTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabService_VisitTab_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabServiceServer).VisitTab(ctx, req.(*VisitTabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabService_CreateGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabServiceServer).CreateGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabService_CreateGuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabServiceServer).CreateGuest(ctx, req.(*CreateGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabService_UpdateGuestName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGuestNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabServiceServer).UpdateGuestName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabService_UpdateGuestName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabServiceServer).UpdateGuestName(ctx, req.(*UpdateGuestNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabService_GetOpenTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenTabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabServiceServer).GetOpenTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabService_GetOpenTab_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabServiceServer).GetOpenTab(ctx, req.(*GetOpenTabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabService_CloseTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabServiceServer).CloseTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabService_CloseTab_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabServiceServer).CloseTab(ctx, req.(*CloseTabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabService_GetVisitedTabs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisitedTabsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabServiceServer).GetVisitedTabs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabService_GetVisitedTabs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabServiceServer).GetVisitedTabs(ctx, req.(*GetVisitedTabsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TabService_ServiceDesc is the grpc.ServiceDesc for TabService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TabService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant.TabService",
	HandlerType: (*TabServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTab",
			Handler:    _TabService_CreateTab_Handler,
		},
		{
			MethodName: "VisitTab",
			Handler:    _TabService_VisitTab_Handler,
		},
		{
			MethodName: "CreateGuest",
			Handler:    _TabService_CreateGuest_Handler,
		},
		{
			MethodName: "UpdateGuestName",
			Handler:    _TabService_UpdateGuestName_Handler,
		},
		{
			MethodName: "GetOpenTab",
			Handler:    _TabService_GetOpenTab_Handler,
		},
		{
			MethodName: "CloseTab",
			Handler:    _TabService_CloseTab_Handler,
		},
		{
			MethodName: "GetVisitedTabs",
			Handler:    _TabService_GetVisitedTabs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "restaurant.proto",
}
